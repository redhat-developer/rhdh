# Copyright Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build Next and Tag Image

on:
  # workflow_dispatch so that it can be triggered manually if needed
  workflow_dispatch:
    inputs:
      registry_image:
        description: "Override the registry image (e.g., polasudo/testing)"
        required: false
        default: "polasudo/testing"
  schedule:
    #Â run at 3:18 UTC every day
    - cron: "18 3 * * *"

  # in addition to building multi-arch :next images daily,
  # also build multi-arch images for any x.y or x.y.z tag pushed to the repo
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+'
    branches:
      - 'release-**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: quay.io
  REGISTRY_IMAGE: rhdh-community/rhdh

jobs:
  build-image:
    name: Build Image
    env:
      HAS_QUAY_AUTH: ${{ secrets.QUAY_USERNAME != '' && secrets.QUAY_TOKEN != '' }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-24.04-arm
          - ubuntu-24.04
    runs-on: ${{ matrix.os }}
    timeout-minutes: 720 # Set to 12 hours instead of default 360 = 6hrs
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-24.04" ]; then
            platform="linux/amd64"
          elif [ "${{ matrix.os }}" == "ubuntu-24.04-arm" ]; then
            platform="linux/arm64"
          else
            echo "Unknown platform"
            exit 1
          fi

          ref_name=${{ github.ref_name }}
          if [ "$ref_name" == "main" ]; then
            ref_name="next"
          elif [[ "$ref_name" =~ ^release-([0-9]+)\.([0-9]+) ]]; then
            # next-1.y
            ref_name="next-${BASH_REMATCH[1]}.${BASH_REMATCH[2]}"
          fi
          ref_name_short="${ref_name}"

          # for releases only
          if [[ $ref_name != "next" ]] && [[ $ref_name != "next-"* ]]; then
            # shorten from 1.6.1 => 1.6
            ref_name_short="${ref_name%.*}"
            if [[ $ref_name_short == "1" ]]; then ref_name_short="${ref_name}"; fi
          fi

          echo "REF_NAME=$ref_name" >> $GITHUB_ENV
          echo "REF_NAME_SHORT=${ref_name_short}" >> $GITHUB_ENV
          echo "PLATFORM=$platform" >> $GITHUB_ENV
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          echo "PLATFORM_ARCH=${platform#*/}" >> $GITHUB_ENV

          # compute expiry once and reuse
          if [[ "$ref_name_short" == "next" ]] || [[ "$ref_name_short" == next-* ]]; then
            expires_after="14d"
          else
            expires_after="183d"
          fi
          echo "EXPIRES_AFTER=$expires_after" >> $GITHUB_ENV

          # allow overriding target image when manually dispatched
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ inputs.registry_image }}" ]; then
            echo "REGISTRY_IMAGE=${{ inputs.registry_image }}" >> $GITHUB_ENV
          fi

      - name: Login to Quay
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}

      - name: "Preflight: Quay login + push permission"
        run: |
          set +x  # Ensure no command echoing
          set -e  # Exit on any error
          
          # 1) Secrets present
          if [ "${{ env.HAS_QUAY_AUTH }}" != "true" ]; then
            echo "::error::Missing QUAY_USERNAME or QUAY_TOKEN secrets"
            exit 1
          fi
          
          # 2) Test push permission using docker API (safer than curl with secrets)
          target="${{ env.REGISTRY }}/${{ env.REGISTRY_IMAGE }}"
          
          # Test by attempting to pull hello-world and tag it for permission check
          if ! docker pull hello-world:latest >/dev/null 2>&1; then
            echo "::error::Docker pull test failed"
            exit 1
          fi
          
          # Tag and attempt push to test permissions (safer approach)
          test_tag="${target}:permission-test-$$"
          docker tag hello-world:latest "${test_tag}" >/dev/null 2>&1
          
          if docker push "${test_tag}" >/dev/null 2>&1; then
            echo "Push permission confirmed for ${target}"
            # Clean up test image
            docker rmi "${test_tag}" >/dev/null 2>&1 || true
          else
            echo "::error::No push permission for ${target}"
            exit 1
          fi
          
          # Clean up
          docker rmi hello-world:latest >/dev/null 2>&1 || true

      - name: Get the last commit short SHA
        uses: ./.github/actions/get-sha

      - name: Build and Push with Buildx (for :next builds, 14d expiry)
        uses: ./.github/actions/docker-build
        id: build-next
        if: ${{ env.REF_NAME_SHORT == 'next' || startsWith(env.REF_NAME_SHORT,'next-') }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}
          imageName: ${{ env.REGISTRY_IMAGE }}
          imageTags: |
            type=raw,value=${{ env.REF_NAME }}-${{ env.PLATFORM_ARCH }}
            type=raw,value=${{ env.REF_NAME }}-${{ env.SHORT_SHA }}-${{ env.PLATFORM_ARCH }}
          imageLabels: quay.expires-after=${{ env.EXPIRES_AFTER }}
          push: true
          platform: ${{ env.PLATFORM }}

      - name: Build and Push with Buildx (for releases, 183d expiry)
        uses: ./.github/actions/docker-build
        id: build-release
        if: ${{ env.REF_NAME_SHORT != 'next' && !startsWith(env.REF_NAME_SHORT,'next-') }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}
          imageName: ${{ env.REGISTRY_IMAGE }}
          imageTags: |
            type=raw,value=${{ env.REF_NAME }}-${{ env.PLATFORM_ARCH }}
            type=raw,value=${{ env.REF_NAME }}-${{ env.SHORT_SHA }}-${{ env.PLATFORM_ARCH }}
          imageLabels: quay.expires-after=${{ env.EXPIRES_AFTER }}
          push: true
          platform: ${{ env.PLATFORM }}

      - name: Export digest (for :next builds)
        id: export-digest-next
        if: ${{ env.REF_NAME_SHORT == 'next' || startsWith(env.REF_NAME_SHORT,'next-') }}
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build-next.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Export digest (for releases)
        id: export-digest-release
        if: ${{ env.REF_NAME_SHORT != 'next' && !startsWith(env.REF_NAME_SHORT,'next-') }}
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build-release.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
      runs-on: ubuntu-latest
      needs:
        - build-image
      env:
        HAS_QUAY_AUTH: ${{ secrets.QUAY_USERNAME != '' && secrets.QUAY_TOKEN != '' }}
      steps:
        - name: Prepare
          run: |
            ref_name=${{ github.ref_name }}
            if [ "$ref_name" == "main" ]; then
              ref_name="next"
            elif [[ "$ref_name" =~ ^release-([0-9]+)\.([0-9]+) ]]; then
              # next-1.y
              ref_name="next-${BASH_REMATCH[1]}.${BASH_REMATCH[2]}"
            fi
            ref_name_short="${ref_name}"

            # for releases only
            if [[ $ref_name != "next" ]] && [[ $ref_name != "next-"* ]]; then
              # shorten from 1.6.1 => 1.6
              ref_name_short="${ref_name%.*}"
              if [[ $ref_name_short == "1" ]]; then ref_name_short="${ref_name}"; fi
            fi
            echo "REF_NAME=$ref_name" >> $GITHUB_ENV
            echo "REF_NAME_SHORT=${ref_name_short}" >> $GITHUB_ENV

            # compute expiry once and reuse
            if [[ "$ref_name_short" == "next" ]] || [[ "$ref_name_short" == next-* ]]; then
              expires_after="14d"
            else
              expires_after="183d"
            fi
            echo "EXPIRES_AFTER=$expires_after" >> $GITHUB_ENV

            # allow overriding target image when manually dispatched
            if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ inputs.registry_image }}" ]; then
              echo "REGISTRY_IMAGE=${{ inputs.registry_image }}" >> $GITHUB_ENV
            fi

        - name: Login to Quay (preflight)
          uses: docker/login-action@v3
          with:
            registry: ${{ env.REGISTRY }}
            username: ${{ secrets.QUAY_USERNAME }}
            password: ${{ secrets.QUAY_TOKEN }}

        - name: "Preflight: Quay login + push permission"
          run: |
            set +x  # Ensure no command echoing
            set -e  # Exit on any error
            
            # 1) Secrets present
            if [ "${{ env.HAS_QUAY_AUTH }}" != "true" ]; then
              echo "::error::Missing QUAY_USERNAME or QUAY_TOKEN secrets"
              exit 1
            fi
            
            # 2) Test push permission using docker API (safer than curl with secrets)
            target="${{ env.REGISTRY }}/${{ env.REGISTRY_IMAGE }}"
            
            # Test by attempting to pull hello-world and tag it for permission check
            if ! docker pull hello-world:latest >/dev/null 2>&1; then
              echo "::error::Docker pull test failed"
              exit 1
            fi
            
            # Tag and attempt push to test permissions (safer approach)
            test_tag="${target}:permission-test-$$"
            docker tag hello-world:latest "${test_tag}" >/dev/null 2>&1
            
            if docker push "${test_tag}" >/dev/null 2>&1; then
              echo "Push permission confirmed for ${target}"
              # Clean up test image
              docker rmi "${test_tag}" >/dev/null 2>&1 || true
            else
              echo "::error::No push permission for ${target}"
              exit 1
            fi
            
            # Clean up
            docker rmi hello-world:latest >/dev/null 2>&1 || true
            
            # Logout for now (will login again later with official action)
            docker logout ${{ env.REGISTRY }} >/dev/null 2>&1 || true

        - name: Checkout
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Download digests
          uses: actions/download-artifact@v4
          with:
            path: /tmp/digests
            pattern: digests-*
            merge-multiple: true

        - name: Get the last commit short SHA
          uses: ./.github/actions/get-sha

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Set container metadata (for :next builds, 14d expiry)
          id: meta-next
          if: ${{ env.REF_NAME_SHORT == 'next' || startsWith(env.REF_NAME_SHORT,'next-') }}
          uses: docker/metadata-action@v5
          with:
            images: ${{ env.REGISTRY }}/${{ env.REGISTRY_IMAGE }}
            tags: |
              type=raw,value=${{ env.REF_NAME }}
              type=raw,value=${{ env.REF_NAME }}-${{ env.SHORT_SHA }}
            labels: |
              quay.expires-after=${{ env.EXPIRES_AFTER }}

        - name: Set container metadata (for releases, 183d expiry)
          id: meta-release
          if: ${{ env.REF_NAME_SHORT != 'next' && !startsWith(env.REF_NAME_SHORT,'next-') }}
          uses: docker/metadata-action@v5
          with:
            images: ${{ env.REGISTRY }}/${{ env.REGISTRY_IMAGE }}
            tags: |
              type=raw,value=${{ env.REF_NAME }}
              type=raw,value=${{ env.REF_NAME }}-${{ env.SHORT_SHA }}
              type=raw,value=${{ env.REF_NAME_SHORT }}
              type=raw,value=${{ env.REF_NAME_SHORT }}-${{ env.SHORT_SHA }}
            labels: |
              quay.expires-after=${{ env.EXPIRES_AFTER }}

        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            registry: ${{ env.REGISTRY }}
            username: ${{ secrets.QUAY_USERNAME }}
            password: ${{ secrets.QUAY_TOKEN }}

        - name: Create manifest list and push
          working-directory: /tmp/digests
          run: |
            # Compute the intended tag list deterministically
            base="${{ env.REGISTRY }}/${{ env.REGISTRY_IMAGE }}"
            tags=""
            if [[ "$REF_NAME_SHORT" == "next" ]] || [[ "$REF_NAME_SHORT" == next-* ]]; then
              tags+="$base:$REF_NAME"$'\n'
              tags+="$base:$REF_NAME-$SHORT_SHA"$'\n'
            else
              tags+="$base:$REF_NAME"$'\n'
              tags+="$base:$REF_NAME-$SHORT_SHA"$'\n'
              tags+="$base:$REF_NAME_SHORT"$'\n'
              tags+="$base:$REF_NAME_SHORT-$SHORT_SHA"$'\n'
            fi

            # Dedupe and create manifests with annotation for EACH tag
            printf "%s\n" "$tags" | awk '!seen[$0]++' | while IFS= read -r tag; do
              [ -z "$tag" ] && continue
              docker buildx imagetools create \
                --annotation "quay.expires-after=${EXPIRES_AFTER}" \
                -t "$tag" \
                $(printf '${{ env.REGISTRY }}/${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
            done

        - name: Inspect image (for :next builds)
          id: inspect-next
          if: ${{ env.REF_NAME_SHORT == 'next' || startsWith(env.REF_NAME_SHORT,'next-') }}
          run: |
            docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.REGISTRY_IMAGE }}:${{ steps.meta-next.outputs.version }}

        - name: Inspect image (for releases)
          id: inspect-release
          if: ${{ env.REF_NAME_SHORT != 'next' && !startsWith(env.REF_NAME_SHORT,'next-') }}
          run: |
            docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.REGISTRY_IMAGE }}:${{ steps.meta-release.outputs.version }}
