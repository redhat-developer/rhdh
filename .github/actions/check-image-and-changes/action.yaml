name: "Check Image and Relevant Changes"
description: "Checks if the image already exists and if changes are relevant"

outputs:
  image_exists:
    description: "True if the image already exists"
    value: ${{ steps.image-check.outputs.exists }}
  relevant_changes:
    description: "True if changes require a build"
    value: ${{ steps.changes.outputs.relevant }}
  is_skipped:
    description: "True if build should be skipped (via [skip-build] tag OR image exists with no relevant changes)"
    value: ${{ steps.final-decision.outputs.is_skipped }}
  short_sha:
    description: "Short SHA of the latest commit"
    value: ${{ env.SHORT_SHA }}

runs:
  using: "composite"
  steps:
    - name: Get the last commit short SHA
      id: get-sha
      uses: ./.github/actions/get-sha

    - name: Check for relevant changes
      id: changes
      shell: bash
      run: |
        echo "🔍 Simple check for build requirements..."
        
        # Get changed files
        CHANGED_FILES=$(git diff --name-only origin/main..HEAD || echo "")
        
        if [ -z "$CHANGED_FILES" ]; then
          echo "⚠️  No changed files found"
          echo "is_skipped=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "📋 Changed files:"
        echo "$CHANGED_FILES"
        
        # Simple logic: if any file is in .github/actions or .github/workflows, force build
        FORCE_BUILD=false
        while IFS= read -r file; do
          if [ -n "$file" ]; then
            if [[ "$file" == .github/actions/* ]] || [[ "$file" == .github/workflows/* ]]; then
              echo "🔥 GitHub Actions/workflows changed - forcing build"
              FORCE_BUILD=true
              break
            fi
          fi
        done <<< "$CHANGED_FILES"
        
        if [ "$FORCE_BUILD" = true ]; then
          echo "🚀 DECISION: EXECUTE BUILD"
          echo "is_skipped=false" >> $GITHUB_OUTPUT
        else
          echo "🎉 DECISION: SKIP BUILD"
          echo "is_skipped=true" >> $GITHUB_OUTPUT
        fi

    - name: Set final skip decision
      id: final-decision
      shell: bash
      run: |
        echo "📊 Defining final decision based on previous analysis..."
        
        # Get the decision from the previous step
        IS_SKIPPED="${{ steps.changes.outputs.is_skipped }}"
        
        if [ "$IS_SKIPPED" = "true" ]; then
          echo "🎉 FINAL DECISION: SKIP BUILD"
          echo "is_skipped=true" >> $GITHUB_OUTPUT
        else
          echo "🚀 FINAL DECISION: EXECUTE BUILD"
          echo "is_skipped=false" >> $GITHUB_OUTPUT
        fi
