name: "Check Image and Relevant Changes"
description: "Checks if the image already exists and if changes are relevant"

outputs:
  image_exists:
    description: "True if the image already exists"
    value: ${{ steps.image-check.outputs.exists }}
  relevant_changes:
    description: "True if changes require a build"
    value: ${{ steps.changes.outputs.relevant }}
  is_skipped:
    description: "True if build should be skipped (via [skip-build] tag OR image exists with no relevant changes)"
    value: ${{ steps.final-decision.outputs.is_skipped }}
  short_sha:
    description: "Short SHA of the latest commit"
    value: ${{ env.SHORT_SHA }}

runs:
  using: "composite"
  steps:
    - name: Get the last commit short SHA
      id: get-sha
      uses: ./.github/actions/get-sha

    - name: Check for relevant changes
      id: changes
      shell: bash
      run: |
        echo "🔍 Checking changes and build requirements..."
        
        # Function to check if file is in always-skip paths
        check_always_skip_paths() {
          local file=$1
          if [[ "$file" == docs/* ]] || [[ "$file" == *.md ]]; then
            return 0  # true - always skip
          fi
          return 1  # false - don't skip automatically
        }
        
        # Function to check if file is in image-dependent paths
        check_image_dependent_paths() {
          local file=$1
          if [[ "$file" == e2e/* ]] || [[ "$file" == e2e-tests/* ]] || [[ "$file" == .ibm/* ]] || [[ "$file" == .rhdh/docker/* ]]; then
            return 0  # true - may need image
          fi
          return 1  # false - doesn't need image
        }
        
        # Function to check if file is relevant code for build
        check_relevant_code() {
          local file=$1
          # Files that affect application build
          if [[ "$file" == packages/* ]] || [[ "$file" == plugins/* ]] || [[ "$file" == dynamic-plugins/* ]] || [[ "$file" == app-config*.yaml ]] || [[ "$file" == catalog-entities/* ]] || [[ "$file" == docker/* ]] || [[ "$file" == Dockerfile* ]] || [[ "$file" == package*.json ]] || [[ "$file" == yarn.lock ]] || [[ "$file" == tsconfig*.json ]]; then
            return 0  # true - relevant code
          fi
          return 1  # false - not relevant code
        }
        
        # Search for commits with [skip-build] or [skip build] tag
        echo "🏷️  Checking commits with [skip-build] tag..."
        SKIP_COMMITS=$(git log --format="%H %s" origin/main..HEAD | grep -i "\[skip[- ]build\]" | wc -l)
        
        if [ "$SKIP_COMMITS" -gt 0 ]; then
          echo "✅ Found $SKIP_COMMITS commits with [skip-build] tag"
        else
          echo "❌ No commits with [skip-build] tag found"
        fi
        
        # Get changed files
        echo "📁 Getting list of changed files..."
        CHANGED_FILES=$(git diff --name-only origin/main..HEAD)
        
        if [ -z "$CHANGED_FILES" ]; then
          echo "⚠️  No changed files found"
          echo "SKIP_BUILD=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "📋 Changed files:"
        echo "$CHANGED_FILES" | while read -r file; do
          echo "  - $file"
        done
        
        # Classify files
        ALWAYS_SKIP_FILES=""
        IMAGE_DEPENDENT_FILES=""
        RELEVANT_CODE_FILES=""
        OTHER_FILES=""
        
        echo "$CHANGED_FILES" | while read -r file; do
          if check_always_skip_paths "$file"; then
            ALWAYS_SKIP_FILES="$ALWAYS_SKIP_FILES $file"
          elif check_image_dependent_paths "$file"; then
            IMAGE_DEPENDENT_FILES="$IMAGE_DEPENDENT_FILES $file"
          elif check_relevant_code "$file"; then
            RELEVANT_CODE_FILES="$RELEVANT_CODE_FILES $file"
          else
            OTHER_FILES="$OTHER_FILES $file"
          fi
        done
        
        # Save to temporary files for later use
        echo "$ALWAYS_SKIP_FILES" > /tmp/always_skip_files
        echo "$IMAGE_DEPENDENT_FILES" > /tmp/image_dependent_files  
        echo "$RELEVANT_CODE_FILES" > /tmp/relevant_code_files
        echo "$OTHER_FILES" > /tmp/other_files
        
        ALWAYS_SKIP_FILES=$(cat /tmp/always_skip_files)
        IMAGE_DEPENDENT_FILES=$(cat /tmp/image_dependent_files)
        RELEVANT_CODE_FILES=$(cat /tmp/relevant_code_files)
        OTHER_FILES=$(cat /tmp/other_files)
        
        echo "🔍 File classification:"
        if [ -n "$ALWAYS_SKIP_FILES" ]; then
          echo "📄 Always skip files (docs, *.md): $ALWAYS_SKIP_FILES"
        fi
        if [ -n "$IMAGE_DEPENDENT_FILES" ]; then
          echo "🧪 Image-dependent files (e2e, tests): $IMAGE_DEPENDENT_FILES"
        fi
        if [ -n "$RELEVANT_CODE_FILES" ]; then
          echo "💻 Relevant code files: $RELEVANT_CODE_FILES"
        fi
        if [ -n "$OTHER_FILES" ]; then
          echo "📦 Other files: $OTHER_FILES"
        fi
        
        # Decision logic
        SHOULD_SKIP=false
        
        # If relevant code changed, never skip
        if [ -n "$RELEVANT_CODE_FILES" ]; then
          echo "🔥 Relevant code changed - build required"
          SHOULD_SKIP=false
        # If commits have [skip-build], try to skip
        elif [ "$SKIP_COMMITS" -gt 0 ]; then
          echo "🏷️  [skip-build] tag found - checking if safe to skip..."
          
          # If only always-skip files, can skip
          if [ -z "$IMAGE_DEPENDENT_FILES" ] && [ -z "$OTHER_FILES" ]; then
            echo "✅ Only docs/md files changed - can skip build"
            SHOULD_SKIP=true
          # If image-dependent files present, check if image exists
          elif [ -n "$IMAGE_DEPENDENT_FILES" ]; then
            echo "🧪 Image-dependent files changed - checking if image exists..."
            
            # Check if Docker image exists
            PR_NUMBER="${{ github.event.number }}"
            if [ -z "$PR_NUMBER" ]; then
              echo "⚠️  PR number not found, forcing build"
              SHOULD_SKIP=false
            else
              # Check if image exists in registry
              IMAGE_TAG="pr-$PR_NUMBER"
              IMAGE_NAME="quay.io/rhdh/rhdh-hub:$IMAGE_TAG"
              
              echo "🔍 Checking if image exists: $IMAGE_NAME"
              
              # Try to pull image (silently)
              if docker pull "$IMAGE_NAME" >/dev/null 2>&1; then
                echo "✅ Image found in registry - can skip build"
                SHOULD_SKIP=true
              else
                echo "❌ Image not found in registry - build required"
                SHOULD_SKIP=false
              fi
            fi
          else
            echo "✅ Only other files changed - can skip build"
            SHOULD_SKIP=true
          fi
        else
          echo "❌ No [skip-build] tag found - build required"
          SHOULD_SKIP=false
        fi
        
        # Final result
        if [ "$SHOULD_SKIP" = true ]; then
          echo "🎉 DECISION: SKIP BUILD"
          echo "is_skipped=true" >> $GITHUB_OUTPUT
        else
          echo "🚀 DECISION: EXECUTE BUILD"
          echo "is_skipped=false" >> $GITHUB_OUTPUT
        fi

    - name: Set final skip decision
      id: set-skip-decision
      shell: bash
      run: |
        echo "📊 Defining final decision based on previous analysis..."
        
        # Decision was already taken in the previous step
        echo "✅ Final decision defined in the previous step"
