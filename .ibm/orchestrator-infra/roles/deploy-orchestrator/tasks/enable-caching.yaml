- name: Get backstage resource when available
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  ansible.builtin.shell: |
    oc get backstage -A -o json
  register: backstage_resource
  retries: 20
  delay: 60
  until: backstage_resource is success and (backstage_resource.stdout | from_json)['items'] | length > 0

- name: Enable dynamic plugin caching
  vars:
    backstage_js: "{{ (backstage_resource.stdout | from_json)['items'][0]['metadata'] }}"
    backstage_name: "{{ backstage_js['name'] }}"
    backstage_ns: "{{ backstage_js['namespace'] }}"
  block: 
    - name: Create persistent volume for caching
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      ansible.builtin.shell: |
        cat <<EOF | kubectl apply -n {{ backstage_ns }} -f -
        kind: PersistentVolumeClaim
        apiVersion: v1
        metadata:
          name: dynamic-plugins-root
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 5Gi
        EOF

    - name: Patch backstage resource
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      ansible.builtin.shell: |
        kubectl patch Backstage {{ backstage_name }} -n {{ backstage_ns }} --type='merge' -p='{
          "spec": {
            "deployment": {
              "patch": {
                "spec": {
                  "template": {
                    "spec": {
                      "volumes": [
                        {
                          "$patch": "replace",
                          "name": "dynamic-plugins-root",
                          "persistentVolumeClaim": {
                            "claimName": "dynamic-plugins-root"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }'
      register: backstage_deployment
      retries: 4
      delay: 30
      until: backstage_deployment.stderr == ""

