- name: Check if RHDH Operator is installed by Orchestrator Operator
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  ansible.builtin.shell: |
    oc get orchestrator orchestrator -n orchestrator -o json | jq '.spec.rhdhOperator.enabled'
  register: rhdh_op_enabled
  retries: 5
  delay: 15
  until: rhdh_op_enabled is success

- name: Perform Plugin Version and Integrity Cross Validation
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  when: rhdh_op_enabled.stdout|bool
  block:
    - name: Get Orchestrator CSV example plugin version and integrity values
      ansible.builtin.shell: |
        oc get csv -n openshift-operators | awk '/orchestrator-operator/ {print $1}'
      register: orch_csv
      retries: 3
      delay: 10
      until: orch_csv is success

    - name: Get Orchestrator CSV example plugin version and integrity values
      ansible.builtin.shell: |
        oc get csv -n openshift-operators {{ orch_csv.stdout }} -o json |\
         jq '.metadata.annotations."alm-examples"' -r | jq '.[].spec.rhdhPlugins'
      register: orch_csv_example_plugins_raw
      retries: 3
      delay: 10
      until: orch_csv_example_plugins_raw is success

    - name: Get dynamic-plugins-rhdh configmap plugin content
      ansible.builtin.shell: |
        oc get configmap dynamic-plugins-rhdh -n {{ rhdh_ns }}  -o json | jq '.data."dynamic-plugins.yaml"' -r | yq -o=json | jq '.plugins'
      register: dynamic_plugins_rhdh_yaml
      retries: 12
      delay: 30
      until: dynamic_plugins_rhdh_yaml is success

    - name: Get Orchestrator CRD plugin version and integrity values
      ansible.builtin.shell: |
        oc get crd orchestrators.rhdh.redhat.com -o json | jq '.spec.versions[].schema.openAPIV3Schema.properties.spec.properties.rhdhPlugins.properties'
      register: orch_crd_plugins_props_raw
      retries: 3
      delay: 10
      until: orch_crd_plugins_props_raw is success

    - name: Get Orchestrator Operator helm values.yaml content
      ansible.builtin.shell: |
        oc exec -it $(oc get pods -A -l control-plane=orchestrator-operator --no-headers=true | awk '{print $2}') -n openshift-operators cat /opt/helm/helm-charts/orchestrator/values.yaml
      register: orch_op_values_yaml
      retries: 3
      delay: 10
      until: orch_op_values_yaml is success

    - name: Get Orchestrator CR resource plugin version and integrity values
      ansible.builtin.shell: |
        oc get orchestrator orchestrator -n orchestrator -o json | jq '.spec.rhdhPlugins'
      register: orch_cr_plugins_raw
      retries: 3
      delay: 10
      until: orch_cr_plugins_raw is success

    - name: Set Orchestrator plugin facts from the various sources
      vars:
        orch_crd_plugins_props: "{{ orch_crd_plugins_props_raw.stdout | from_json }}"
        orch_op_values: "{{ (orch_op_values_yaml.stdout | from_yaml).rhdhPlugins }}"
        dynamic_plugins_rhdh_json: "{{ dynamic_plugins_rhdh_yaml.stdout | from_json }}"
        orch_cr_plugins: "{{ orch_cr_plugins_raw.stdout | from_json }}"
        orch_csv_example_plugins: "{{ orch_csv_example_plugins_raw.stdout | from_json }}"
      ansible.builtin.set_fact:
        orch_plugin_compare:
          # Plugin values derived from the Orchestrator Operator CSV alm-example
          orch_csv_example:
            plugin_signals_backend_dynamic:
              version: "{{ (orch_csv_example_plugins.signalsBackend.package | split('@'))[1] }}"
              plugin: "{{ orch_csv_example_plugins.signalsBackend.package }}"
              integrity: "{{ orch_csv_example_plugins.signalsBackend.integrity }}"
            plugin_signals_dynamic:
              version: "{{ (orch_csv_example_plugins.signals.package | split('@'))[1] }}"
              plugin: "{{ orch_csv_example_plugins.signals.package }}"
              integrity: "{{ orch_csv_example_plugins.signals.integrity }}"
            backstage_plugin_orchestrator_backend_dynamic:
              version: "{{ (orch_csv_example_plugins.orchestratorBackend.package | split('@'))[1] }}"
              plugin: "{{ orch_csv_example_plugins.orchestratorBackend.package }}"
              integrity: "{{ orch_csv_example_plugins.orchestratorBackend.integrity }}"
            backstage_plugin_orchestrator:
              version: "{{ (orch_csv_example_plugins.orchestrator.package | split('@'))[1] }}"
              plugin: "{{ orch_csv_example_plugins.orchestrator.package }}"
              integrity: "{{ orch_csv_example_plugins.orchestrator.integrity }}"
            plugin_notifications_backend_module_email_dynamic:
              version: "{{ (orch_csv_example_plugins.notificationsEmail.package | split('@'))[1] }}"
              plugin: "{{ orch_csv_example_plugins.notificationsEmail.package }}"
              integrity: "{{ orch_csv_example_plugins.notificationsEmail.integrity }}"
            plugin_notifications_backend_dynamic:
              version: "{{ (orch_csv_example_plugins.notificationsBackend.package | split('@'))[1] }}"
              plugin: "{{ orch_csv_example_plugins.notificationsBackend.package  }}"
              integrity: "{{ orch_csv_example_plugins.notificationsBackend.integrity }}"
            plugin_notifications_dynamic:
              version: "{{ (orch_csv_example_plugins.notifications.package | split('@'))[1] }}"
              plugin: "{{ orch_csv_example_plugins.notifications.package  }}"
              integrity: "{{ orch_csv_example_plugins.notifications.integrity }}"

          # Plugin values derived from the Orchestrator CR resource (not CRD)
          orch_cr_plugins:
            plugin_notifications_backend_module_email_dynamic:
              version: "{{ (orch_cr_plugins.notificationsEmail.package|default('@') | split('@'))[1] }}"
              plugin: "{{ orch_cr_plugins.notificationsEmail.package|default('No Plugin Defined') }}"
              integrity: "{{ orch_cr_plugins.notificationsEmail.integrity|default('') }}"
            backstage_plugin_orchestrator:
              version: "{{ (orch_cr_plugins.orchestrator.package|default('@') | split('@'))[1] }}"
              plugin: "{{ orch_cr_plugins.orchestrator.package|default('No Plugin Defined') }}"
              integrity: "{{ orch_cr_plugins.orchestrator.integrity|default('') }}"
            plugin_signals_backend_dynamic:
              version: "{{ (orch_cr_plugins.signalsBackend.package|default('@') | split('@'))[1] }}"
              plugin: "{{ orch_cr_plugins.signalsBackend.package|default('No Plugin Defined') }}"
              integrity: "{{ orch_cr_plugins.signalsBackend.integrity|default('') }}"
            plugin_signals_dynamic:
              version: "{{ (orch_cr_plugins.signals.package|default('@') | split('@'))[1] }}"
              plugin: "{{ orch_cr_plugins.signals.package|default('No Plugin Defined')  }}"
              integrity: "{{ orch_cr_plugins.signals.integrity|default('') }}"
            backstage_plugin_orchestrator_backend_dynamic:
              version: "{{ (orch_cr_plugins.orchestratorBackend.package|default('@') | split('@'))[1] }}"
              plugin: "{{ orch_cr_plugins.orchestratorBackend.package|default('No Plugin Defined')  }}"
              integrity: "{{ orch_cr_plugins.orchestratorBackend.integrity|default('') }}"
            plugin_notifications_backend_dynamic:
              version: "{{ (orch_cr_plugins.notificationsBackend.package|default('@') | split('@'))[1] }}"
              plugin: "{{ orch_cr_plugins.notificationsBackend.package|default('No Plugin Defined') }}"
              integrity: "{{ orch_cr_plugins.notificationsBackend.integrity|default('') }}"
            plugin_notifications_dynamic:
              version: "{{ (orch_cr_plugins.notifications.package|default('@') | split('@'))[1] }}"
              plugin: "{{ orch_cr_plugins.notifications.package|default('No Plugin Defined') }}"
              integrity: "{{ orch_cr_plugins.notifications.integrity|default('') }}"

          # Plugin values derived from rhdh-operator dynamic-plugins-rhdh configmap
          cm_dynamic_plugins:
            plugin_signals_backend_dynamic:
              version: "{{ ((dynamic_plugins_rhdh_json | selectattr('package', 'contains', 'plugin-signals-backend-dynamic@'))[0].package | split('@'))[2] }}"
              plugin: "{{ (dynamic_plugins_rhdh_json | selectattr('package', 'contains', 'plugin-signals-backend-dynamic@'))[0].package }}"
              integrity: "{{ (dynamic_plugins_rhdh_json | selectattr('package', 'contains', 'plugin-signals-backend-dynamic@'))[0].integrity}}"
            plugin_signals_dynamic:
              version: "{{ ((dynamic_plugins_rhdh_json | selectattr('package', 'contains', 'plugin-signals-dynamic@'))[0].package | split('@'))[2]}}"
              plugin: "{{ (dynamic_plugins_rhdh_json | selectattr('package', 'contains', 'plugin-signals-dynamic@'))[0].package }}"
              integrity: "{{ (dynamic_plugins_rhdh_json | selectattr('package', 'contains', 'plugin-signals-dynamic@'))[0].integrity}}"
            backstage_plugin_orchestrator_backend_dynamic:
              version: "{{ ((dynamic_plugins_rhdh_json | selectattr('package', 'contains', 'backstage-plugin-orchestrator-backend-dynamic@'))[0].package | split('@'))[2]}}"
              plugin: "{{ (dynamic_plugins_rhdh_json | selectattr('package', 'contains', 'backstage-plugin-orchestrator-backend-dynamic@'))[0].package }}"
              integrity: "{{ (dynamic_plugins_rhdh_json | selectattr('package', 'contains', 'backstage-plugin-orchestrator-backend-dynamic@'))[0].integrity}}"
            backstage_plugin_orchestrator:
              version: "{{ ((dynamic_plugins_rhdh_json | selectattr('package', 'contains', 'backstage-plugin-orchestrator@'))[0].package | split('@'))[2]}}"
              plugin: "{{ (dynamic_plugins_rhdh_json | selectattr('package', 'contains', 'backstage-plugin-orchestrator@'))[0].package }}"
              integrity: "{{ (dynamic_plugins_rhdh_json | selectattr('package', 'contains', 'backstage-plugin-orchestrator@'))[0].integrity}}"
            plugin_notifications_backend_module_email_dynamic:
              version: "{{ ((dynamic_plugins_rhdh_json | selectattr('package', 'contains', 'plugin-notifications-backend-module-email-dynamic@'))[0].package | split('@'))[2]}}"
              plugin: "{{ (dynamic_plugins_rhdh_json | selectattr('package', 'contains', 'plugin-notifications-backend-module-email-dynamic@'))[0].package }}"
              integrity: "{{ (dynamic_plugins_rhdh_json | selectattr('package', 'contains', 'plugin-notifications-backend-module-email-dynamic@'))[0].integrity}}"
            plugin_notifications_backend_dynamic:
              version: "{{ ((dynamic_plugins_rhdh_json | selectattr('package', 'contains', 'plugin-notifications-backend-dynamic@'))[0].package | split('@'))[2]}}"
              plugin: "{{ (dynamic_plugins_rhdh_json | selectattr('package', 'contains', 'plugin-notifications-backend-dynamic@'))[0].package }}"
              integrity: "{{ (dynamic_plugins_rhdh_json | selectattr('package', 'contains', 'plugin-notifications-backend-dynamic@'))[0].integrity}}"
            plugin_notifications_dynamic:
              version: "{{ ((dynamic_plugins_rhdh_json | selectattr('package', 'contains', 'plugin-notifications-dynamic@'))[0].package | split('@'))[2]}}"
              plugin: "{{ (dynamic_plugins_rhdh_json | selectattr('package', 'contains', 'plugin-notifications-dynamic@'))[0].package}}"
              integrity: "{{ (dynamic_plugins_rhdh_json | selectattr('package', 'contains', 'plugin-notifications-dynamic@'))[0].integrity}}"

          # Plugin values derived from the Orchestrator CRD (not resource)
          orch_crd_plugins:
            plugin_signals_backend_dynamic:
              version: "{{ (orch_crd_plugins_props.signalsBackend.properties.package.default | split('@'))[1] }}"
              plugin: "{{ orch_crd_plugins_props.signalsBackend.properties.package.default }}"
              integrity: "{{ orch_crd_plugins_props.signalsBackend.properties.integrity.default }}"
            plugin_signals_dynamic:
              version: "{{ (orch_crd_plugins_props.signals.properties.package.default | split('@'))[1] }}"
              plugin: "{{ orch_crd_plugins_props.signals.properties.package.default }}"
              integrity: "{{ orch_crd_plugins_props.signals.properties.integrity.default }}"
            backstage_plugin_orchestrator_backend_dynamic:
              version: "{{ (orch_crd_plugins_props.orchestratorBackend.properties.package.default | split('@'))[1] }}"
              plugin: "{{ orch_crd_plugins_props.orchestratorBackend.properties.package.default }}"
              integrity: "{{ orch_crd_plugins_props.orchestratorBackend.properties.integrity.default }}"
            backstage_plugin_orchestrator:
              version: "{{ (orch_crd_plugins_props.orchestrator.properties.package.default | split('@'))[1] }}"
              plugin: "{{ orch_crd_plugins_props.orchestrator.properties.package.default }}"
              integrity: "{{ orch_crd_plugins_props.orchestrator.properties.integrity.default }}"
            plugin_notifications_backend_module_email_dynamic:
              version: "{{ (orch_crd_plugins_props.notificationsEmail.properties.package.default | split('@'))[1] }}"
              plugin: "{{ orch_crd_plugins_props.notificationsEmail.properties.package.default }}"
              integrity: "{{ orch_crd_plugins_props.notificationsEmail.properties.integrity.default }}"
            plugin_notifications_backend_dynamic:
              version: "{{ (orch_crd_plugins_props.notificationsBackend.properties.package.default | split('@'))[1] }}"
              plugin: "{{ orch_crd_plugins_props.notificationsBackend.properties.package.default  }}"
              integrity: "{{ orch_crd_plugins_props.notificationsBackend.properties.integrity.default }}"
            plugin_notifications_dynamic:
              version: "{{ (orch_crd_plugins_props.notifications.properties.package.default | split('@'))[1] }}"
              plugin: "{{ orch_crd_plugins_props.notifications.properties.package.default  }}"
              integrity: "{{ orch_crd_plugins_props.notifications.properties.integrity.default }}"

          # Plugin values derived from the orchestrator operator helm  /opt/helm/helm-charts/orchestrator/values.yaml
          orch_op_values_plugins:
            plugin_signals_backend_dynamic:
              version: "{{ (orch_op_values.signalsBackend.package | split('@'))[1] }}"
              plugin: "{{ orch_op_values.signalsBackend.package  }}"
              integrity: "{{ orch_op_values.signalsBackend.integrity }}"
            plugin_signals_dynamic:
              version: "{{ (orch_op_values.signals.package | split('@'))[1] }}"
              plugin: "{{ orch_op_values.signals.package  }}"
              integrity: "{{ orch_op_values.signals.integrity }}"
            backstage_plugin_orchestrator_backend_dynamic:
              version: "{{ (orch_op_values.orchestratorBackend.package | split('@'))[1] }}"
              plugin: "{{ orch_op_values.orchestratorBackend.package  }}"
              integrity: "{{ orch_op_values.orchestratorBackend.integrity }}"
            backstage_plugin_orchestrator:
              version: "{{ (orch_op_values.orchestrator.package | split('@'))[1] }}"
              plugin: "{{ orch_op_values.orchestrator.package  }}"
              integrity: "{{ orch_op_values.orchestrator.integrity }}"
            plugin_notifications_backend_module_email_dynamic:
              version: "{{ (orch_op_values.notificationsEmail.package | split('@'))[1] }}"
              plugin: "{{ orch_op_values.notificationsEmail.package  }}"
              integrity: "{{ orch_op_values.notificationsEmail.integrity }}"
            plugin_notifications_backend_dynamic:
              version: "{{ (orch_op_values.notificationsBackend.package | split('@'))[1] }}"
              plugin: "{{ orch_op_values.notificationsBackend.package }}"
              integrity: "{{ orch_op_values.notificationsBackend.integrity }}"
            plugin_notifications_dynamic:
              version: "{{ (orch_op_values.notifications.package | split('@'))[1] }}"
              plugin: "{{ orch_op_values.notifications.package  }}"
              integrity: "{{ orch_op_values.notifications.integrity }}"

    - name: Show debug output all version/integrity/plugins
      debug:
        msg: "{{ orch_plugin_compare }}"

    - name: Ensure Plugin version and integrity matches across plugin configurations
      assert:
        that:
          - "'{{ orch_plugin_compare.orch_crd_plugins[item]['version'] }}' == '{{ orch_plugin_compare.cm_dynamic_plugins[item]['version'] }}'"
          - "'{{ orch_plugin_compare.orch_crd_plugins[item]['integrity'] }}' == '{{ orch_plugin_compare.cm_dynamic_plugins[item]['integrity'] }}'"
          - "'{{ orch_plugin_compare.orch_crd_plugins[item]['version'] }}' == '{{ orch_plugin_compare.orch_op_values_plugins[item]['version'] }}'"
          - "'{{ orch_plugin_compare.orch_crd_plugins[item]['integrity'] }}' == '{{ orch_plugin_compare.orch_op_values_plugins[item]['integrity'] }}'"
          - "'{{ orch_plugin_compare.cm_dynamic_plugins[item]['version'] }}' == '{{ orch_plugin_compare.orch_op_values_plugins[item]['version'] }}'"
          - "'{{ orch_plugin_compare.cm_dynamic_plugins[item]['integrity'] }}' == '{{ orch_plugin_compare.orch_op_values_plugins[item]['integrity'] }}'"
          - "'{{ orch_plugin_compare.orch_csv_example[item]['version'] }}' == '{{ orch_plugin_compare.orch_op_values_plugins[item]['version'] }}'"
          - "'{{ orch_plugin_compare.orch_csv_example[item]['integrity'] }}' == '{{ orch_plugin_compare.orch_op_values_plugins[item]['integrity'] }}'"
          # Extra logic is to cancel out the test by making both sides equal if the CR Plugin is not defined (which is possible if the user just wants defaults)
          - "'{{ orch_plugin_compare.orch_crd_plugins[item]['version'] }}' == '{{ orch_plugin_compare.orch_cr_plugins[item]['version'] if orch_plugin_compare.orch_cr_plugins[item]['version'] != '' else orch_plugin_compare.orch_crd_plugins[item]['version'] }}'"
          - "'{{ orch_plugin_compare.orch_crd_plugins[item]['integrity'] }}' == '{{ orch_plugin_compare.orch_cr_plugins[item]['integrity'] if orch_plugin_compare.orch_cr_plugins[item]['integrity'] != '' else orch_plugin_compare.orch_crd_plugins[item]['integrity'] }}'"
        success_msg: |
          Plugin {{ item }} has matching plugin versions and integrity in each configuration
        fail_msg: |
          Plugin {{ item }} has mismatch plugin version or integrity in one or more configurations:
          - Identified by `oc get crd orchestrators.rhdh.redhat.com -o json | jq '.spec.versions[].schema.openAPIV3Schema.properties.spec.properties.rhdhPlugins.properties'`
          - Orchestrator CRD Version: {{ orch_plugin_compare.orch_crd_plugins[item]['version'] }}, 
          - Orchestrator CRD Integrity: {{ orch_plugin_compare.orch_crd_plugins[item]['integrity'] }}, 
          - Orchestrator CRD  Plugin: {{ orch_plugin_compare.orch_crd_plugins[item]['plugin'] }}

          - Identified by `oc get orchestrator orchestrator -n orchestrator -o json | jq '.spec.rhdhPlugins'`
          - Orchestrator CR Version: {{ orch_plugin_compare.orch_cr_plugins[item]['version'] }}, 
          - Orchestrator CR Integrity: {{ orch_plugin_compare.orch_cr_plugins[item]['integrity'] }},       
          - Orchestrator CR Plugin: {{ orch_plugin_compare.orch_cr_plugins[item]['plugin'] }}

          - Identified by `oc get configmap dynamic-plugins-rhdh -n {{ rhdh_ns }}  -o json | jq '.data."dynamic-plugins.yaml"' -r | yq -o=json | jq '.plugins'`
          - Dynamic Plugin Configmap Version: {{ orch_plugin_compare.cm_dynamic_plugins[item]['version'] }}, 
          - Dynamic Plugin Configmap Integrity: {{ orch_plugin_compare.cm_dynamic_plugins[item]['integrity'] }},     
          - Dynamic Plugin Configmap Plugin: {{ orch_plugin_compare.cm_dynamic_plugins[item]['plugin'] }}         

          - Identified by `oc exec -it $(oc get pods -A -l control-plane=orchestrator-operator --no-headers=true | awk '{print $2}') -n openshift-operators cat /opt/helm/helm-charts/orchestrator/values.yaml`
          - Operator Helm values.yaml Version: {{ orch_plugin_compare.orch_op_values_plugins[item]['version'] }}, 
          - Operator Helm values.yaml Integrity: {{ orch_plugin_compare.orch_op_values_plugins[item]['integrity'] }}, 
          - Operator Helm values.yaml Plugin: {{ orch_plugin_compare.orch_op_values_plugins[item]['plugin'] }}

          - Identified by `oc get csv -n openshift-operators {{ orch_csv.stdout }} -o json | jq '.metadata.annotations."alm-examples"' -r | jq '.[].spec.rhdhPlugins' `
          - Orchestrator CSV Example Version: {{ orch_plugin_compare.orch_csv_example[item]['version'] }}, 
          - Orchestrator CSV Example Version Integrity: {{ orch_plugin_compare.orch_csv_example[item]['integrity'] }}, 
          - Orchestrator CSV Example Version Plugin: {{ orch_plugin_compare.orch_csv_example[item]['plugin'] }}

          - NPM Registry is {{ orch_npmrc_registry_options[orch_npmrc_registry] }}
          (Note: "Orchestrator CR" can have empty values if it was not user defined in the Orchestrator resource - this is expected and will not cause a mismatch)

          - If the mismatch is due to an integrity mismatch, to find the correct integrity run:
              npm config set registry  {{ orch_npmrc_registry_options[orch_npmrc_registry] }}
              npm show {{ orch_plugin_compare.cm_dynamic_plugins[item]['plugin'] }}
        quiet: true
      loop: "{{ orch_plugin_compare.orch_crd_plugins.keys()|list}}"
      ignore_errors: true
      register: plugin_assert_result

    - name: Cleanup Assert Failure output
      when:
        - plugin_assert_result['failed']|default(false)
        - item['failed']
      debug:
        msg:
          - "Failed due to mismatch: {{ item['assertion'] }}"
          - "{{ item['msg'] | split('\n') }}"
      loop: "{{ plugin_assert_result['results'] }}"
      failed_when: plugin_assert_result['failed']
      ignore_errors: "{{ orch_validate_plugins_ignore_errors|bool }}"
