---
description: E2E/CI context of RHDH to assist the agent in testing and pipeline tasks.
globs: .ibm/**,e2e-tests/**,docs/e2e-tests/**
alwaysApply: false
---
# RHDH (Red Hat Developer Hub) Repository Context

This document serves as a comprehensive starting point for LLMs working with the RHDH repository. It provides detailed information about the e2e-tests, testing infrastructure and CI/CD pipeline.

## Table of Contents

- [E2E Testing Framework](#e2e-testing-framework)
- [CI/CD Infrastructure](#cicd-infrastructure)
- [Key Dependencies and Common Issues](#key-dependencies-and-common-issues)
- [Documentation References](#documentation-references)

## E2E Testing Framework

### Technology Stack
- **Testing Framework**: Playwright with TypeScript
- **Node.js Version**: 22
- **Package Manager**: Yarn 3.8.7
- **Test Runner**: Playwright Test
- **Reporting**: HTML, JUnit XML, List reporters

Current versions for e2e-tests are defined in `e2e-tests/package.json`

### Test Structure and Organization

#### Directory Structure
```
e2e-tests/
├── playwright/
│   ├── e2e/                    # Main test files
│   │   ├── authProviders/      # Authentication provider tests
│   │   ├── plugins/           # Plugin-specific tests
│   │   ├── configuration-test/ # Configuration tests
│   │   ├── audit-log/         # Audit log tests
│   │   └── *.spec.ts          # General test files
│   ├── utils/                 # Test utilities
│   ├── data/                  # Test data
│   └── support/               # Test support files
├── tests/                     # Additional test files
├── tests-examples/           # Example tests
├── scripts/                  # Test scripts
├── screenshots/              # Test screenshots
├── test-results/             # Test results
└── playwright-report/        # Playwright reports
```

#### Test File Requirements

**Component Assignment**: Every test file (`*.spec.ts`) in the `e2e-tests` folder must have a component assigned in the `test.beforeAll` hook using the following syntax:

```typescript
test.beforeAll(async ({ }, testInfo) => {
  testInfo.annotations.push({
    type: "component",
    description: "your_value",
  });
});
```

**Purpose**: This component annotation is used for test categorization, reporting, and CI/CD pipeline organization. It helps identify which component or feature area each test file is validating.

**Examples of Component Values**:
- `"authentication"` - for authentication provider tests
- `"rbac"` - for role-based access control tests
- `"plugins"` - for plugin functionality tests
- `"configuration"` - for configuration validation tests
- `"audit-log"` - for audit logging tests
- `"core"` - for core functionality tests
- `"navigation"` - for navigation and routing tests
- `"api"` - for API endpoint and integration tests
- `"integration"` - for external service integration tests
- `"monitoring"` - for monitoring and observability tests
- `"data-management"` - for data handling and management tests

**Note**: The component description should be descriptive and consistent across related test files to ensure proper test organization and reporting.

#### Key Test Categories

1. **Smoke Tests** (`smoke-test.spec.ts`)
   - Basic functionality verification
   - Health checks and core features

2. **Showcase Tests** (Multiple projects)
   - `showcase`: General functionality tests
   - `showcase-rbac`: Role-based access control tests
   - `showcase-k8s`: Kubernetes integration tests
   - `showcase-operator`: Operator-based deployment tests
   - `showcase-runtime`: Runtime environment tests
   - `showcase-upgrade`: Upgrade scenario tests

3. **Authentication Provider Tests** (`showcase-auth-providers`)
   - OIDC (Red Hat Backstage Keycloak)
   - Microsoft OAuth2
   - GitHub authentication
   - LDAP (Active Directory)

4. **Plugin Tests** (`playwright/e2e/plugins/`)
   - RBAC (Role-Based Access Control)
   - Kubernetes actions
   - Notifications
   - Topology
   - Quay integration
   - Tekton
   - Dynamic plugins info
   - Adoption insights
   - Analytics

5. **Configuration Tests** (`playwright/e2e/configuration-test/`)
   - Config map validation
   - Environment-specific configurations

6. **Audit Log Tests** (`playwright/e2e/audit-log/`)
   - Audit logging functionality
   - Compliance verification

### Test Execution Scripts

Available yarn scripts in `e2e-tests/package.json`:

```bash
# Showcase tests
yarn showcase                    # General showcase tests
yarn showcase-rbac              # RBAC showcase tests
yarn showcase-k8s-ci-nightly    # Kubernetes showcase tests
yarn showcase-operator-nightly  # Operator showcase tests
yarn showcase-runtime           # Runtime showcase tests
yarn showcase-upgrade-nightly   # Upgrade showcase tests

# Authentication provider tests
yarn showcase-auth-providers    # Auth provider tests

# Plugin tests
yarn showcase-sanity-plugins    # Plugin sanity tests

# Utility scripts
yarn lint:check                 # Lint checking
yarn lint:fix                   # Lint fixing
yarn tsc                        # TypeScript compilation
yarn prettier:check            # Prettier checking
yarn prettier:fix              # Prettier fixing
```

### Environment Variables

All the important environment variables are stored in @.ibm/pipelines/env_variables.sh
Most of them are populated by secrets from the Vault.

⚠️ Important Notice
Do not place any secrets directly into a file.
All sensitive information must be stored in the Vault.

### Test Configuration

Playwright configuration (`e2e-tests/playwright.config.ts`):
- **Timeout**: 90 seconds global, 10-15 seconds for actions
- **Retries**: 2 on CI, 0 locally
- **Workers**: 3 parallel workers
- **Viewport**: 1920x1080
- **Video**: Enabled for all tests
- **Screenshots**: Only on failure
- **Trace**: Retain on failure

### Test Projects

The configuration defines multiple test projects:
- `smoke-test`: Basic smoke tests with 10 retries
- `showcase`: General functionality tests
- `showcase-rbac`: RBAC-specific tests
- `showcase-auth-providers`: Authentication provider tests
- `showcase-k8s`: Kubernetes integration tests
- `showcase-operator`: Operator-based tests
- `showcase-runtime`: Runtime environment tests
- `showcase-upgrade`: Upgrade scenario tests

### Key Differences: showcase-auth-providers vs Other Showcase Projects

The `showcase-auth-providers` project has several significant differences from other showcase projects, particularly in deployment and configuration:

#### **Namespace and Release Management**
- **Other Showcase Projects**: Use standard namespace patterns (`showcase-ci-nightly`, `showcase-rbac-nightly`)
- **showcase-auth-providers**: Uses dedicated namespace `showcase-auth-providers` and release `rhdh-auth-providers`
- **Logging**: Dedicated logs folder: `e2e-tests/auth-providers-logs`

#### **Test Retry Configuration**
- **Other Showcase Projects**: Typically use 2 retries (CI default)
- **showcase-auth-providers**: Configured with only 1 retry due to the complexity of authentication provider setup and teardown

#### **Configuration and Deployment Approach**
- **Other Showcase Projects**: Use Bash scripts for configuration and deployment
- **showcase-auth-providers**: Uses TypeScript for configuration and deployment management
- **Configuration Files**: Uses different configuration files compared to other showcase projects:
  - `e2e-tests/playwright/e2e/authProviders/` directory structure with TypeScript test files
  - Dedicated values file: `.ibm/pipelines/value_files/values_showcase-auth-providers.yaml`
  - TypeScript-based test configuration instead of Bash scripts
  - Dynamic RHDH instance management (create, update, restart, delete)

#### **Required Plugins and Dependencies**
- **Other Showcase Projects**: Standard plugin dependencies
- **showcase-auth-providers**: Requires specific plugins exported to `dynamic-plugins-root`:
  - `backstage-community-plugin-catalog-backend-module-keycloak-dynamic`
  - `backstage-plugin-catalog-backend-module-github-org-dynamic`
  - `backstage-plugin-catalog-backend-module-msgraph-dynamic`
  - `backstage-community-plugin-rbac`

#### **Authentication Provider Coverage**
- **Other Showcase Projects**: Standard authentication testing
- **showcase-auth-providers**: Tests multiple authentication providers:
  - OIDC using Red Hat Backstage Keycloak (RHBK)
  - Microsoft OAuth2 provider
  - GitHub authentication
  - LDAP using Active Directory (commented out)

#### **Test Structure and Files**
- **Other Showcase Projects**: Standard test file patterns
- **showcase-auth-providers**: Dedicated test structure:
  - `e2e-tests/playwright/e2e/authProviders/` directory
  - Individual test files: `oidc.spec.ts`, `microsoft.spec.ts`, `github.spec.ts`, `ldap.spec.ts`
  - Tests verify: supported resolvers, user/group ingestion, nested groups, session token configuration

These differences make `showcase-auth-providers` a specialized testing environment focused on validating authentication provider integrations rather than general RHDH functionality testing.

## CI/CD Infrastructure

### OpenShift CI Overview

The RHDH CI/CD pipeline uses **OpenShift CI** with **Prow-based** automation and **ephemeral clusters** for testing.

Check the readme at `.ibm/pipelines/README.md`

#### Key Components

1. **Ephemeral Clusters**: AWS-based clusters in `us-east-2` region
2. **Cluster Management**: Managed via cluster claims
3. **CI Job Types**: OCP, EKS, GKE, AKS environments
4. **Authentication**: Keycloak as default provider
5. **Secrets Management**: Vault-managed secrets

### Cluster Pools

Available cluster pools for different OCP versions:

- **RHDH-4-19-US-EAST-2**
  - Usage: OCP v4.19 nightly jobs
  - [Cluster Pool Configuration](https://github.com/openshift/release/blob/master/clusters/hosted-mgmt/hive/pools/rhdh/rhdh-ocp-4-19-0-amd64-aws-us-east-2_clusterpool.yaml)

- **RHDH-4-18-US-EAST-2**
  - Usage: OCP v4.18 nightly jobs
  - [Cluster Pool Configuration](https://github.com/openshift/release/blob/master/clusters/hosted-mgmt/hive/pools/rhdh/rhdh-ocp-4-18-0-amd64-aws-us-east-2_clusterpool.yaml)

- **RHDH-4-17-US-EAST-2**
  - Usage: PR checks on main branch and OCP v4.17 nightly jobs
  - [Cluster Pool Configuration](https://github.com/openshift/release/blob/master/clusters/hosted-mgmt/hive/pools/rhdh/rhdh-ocp-4-17-0-amd64-aws-us-east-2_clusterpool.yaml)

- **RHDH-4-16-US-EAST-2**
  - Usage: OCP v4.16 nightly jobs
  - [Cluster Pool Configuration](https://github.com/openshift/release/blob/master/clusters/hosted-mgmt/hive/pools/rhdh/rhdh-ocp-4-16-0-amd64-aws-us-east-2_clusterpool.yaml)

**Note:** This is subject to change. Use `.ibm/pipelines/README.md` as a source of truth.

### CI Job Types

#### Pull Request Tests
- **Trigger**: Automatic for code changes, manual with `/ok-to-test`
- **Environment**: Ephemeral OpenShift cluster
- **Scope**: Both RBAC and non-RBAC namespaces
- **Artifacts**: 6-month retention period

#### Nightly Tests
- **Schedule**: Automated nightly runs
- **Environments**: Multiple OCP versions, AKS, GKE
- **Reporting**: Slack notifications to `#rhdh-e2e-test-alerts`

### Test Execution Environment

#### Local Development
Tests are run directly using Playwright Test with Node.js 22 and Yarn 3.8.7 as specified in the technology stack above.

#### CI/CD Pipeline Execution
For CI/CD pipeline execution, tests run in a containerized environment using the image `.ibm/images/Dockerfile`. This image is based on `mcr.microsoft.com/playwright` and uses Ubuntu as the base operating system.

**Note**: Any additional system dependencies required for testing must be installed in this Docker image to ensure CI/CD pipeline compatibility.

#### Alternative Execution Methods
**Podman Usage**: If you need to prepare the environment or run tests close to how CI/CD pipeline runs them, you can use Podman to run the `.ibm/pipelines/openshift-ci-tests.sh` script inside the Docker image.

**RHEL/Fedora Systems**: On Playwright unsupported systems such as RHEL or Fedora, running tests inside the containerized environment using Podman is the recommended approach to avoid compatibility issues.

### Key CI Scripts

#### Main Orchestration
- **`.ibm/pipelines/openshift-ci-tests.sh`**: Main test orchestration script
- **`.ibm/pipelines/utils.sh`**: Utility functions
- **`.ibm/pipelines/reporting.sh`**: Reporting and notifications
- **`.ibm/pipelines/env_variables.sh`**: Environment variable management

#### Job Handlers
The main script handles different job types:
- `handle_aks_helm`: AKS Helm deployment
- `handle_eks_helm`: EKS Helm deployment
- `handle_gke_helm`: GKE Helm deployment
- `handle_ocp_operator`: OCP Operator deployment
- `handle_ocp_nightly`: OCP nightly tests
- `handle_ocp_pull`: OCP PR tests
- `handle_auth_providers`: Auth provider tests

#### Special Case: showcase-auth-providers Deployment

The `showcase-auth-providers` project has a unique deployment workflow that differs significantly from other showcase projects:

**Job Pattern**: `*e2e-tests-auth-providers-nightly`
**Handler**: `handle_auth_providers()` function in `.ibm/pipelines/jobs/auth-providers.sh`
**Configuration**: Uses dedicated values file `values_showcase-auth-providers.yaml` with auth provider-specific settings
**Test Execution**: Runs TypeScript-based tests from `e2e-tests/playwright/e2e/authProviders/` directory

### Access and Debugging

#### Cluster Access
For cluster pool admins, use the login script:
```bash
.ibm/pipelines/ocp-cluster-claim-login.sh
```

#### Debugging Process
1. Run the login script
2. Provide Prow log URL when prompted
3. Script will forward cluster web console URL and credentials
4. Ephemeral clusters are deleted after CI job termination

### CI Configuration Files

- **Job Definitions**: [OpenShift Release Jobs](https://github.com/openshift/release/tree/master/ci-operator/jobs/redhat-developer/rhdh)
- **Configuration**: [OpenShift Release Config](https://github.com/openshift/release/tree/master/ci-operator/config/redhat-developer/rhdh)
- **Step Registry**: [OpenShift Release Steps](https://github.com/openshift/release/tree/master/ci-operator/step-registry/redhat-developer/rhdh)

### Debugging

#### Local Development
```bash
# Set local development flags
export ISRUNNINGLOCAL=true
export ISRUNNINGLOCALDEBUG=true

# Run tests locally
npx playwright test --project showcase-auth-providers --workers 1
```

#### CI Debugging
1. **Access Logs**: Check PR artifacts or CI logs
2. **Cluster Access**: Use cluster claim login script
3. **Environment Variables**: Verify required variables
4. **Test Failures**: Review test reports and screenshots

#### Common Debugging Tools
- **Playwright Inspector**: `npx playwright test --debug`
- **Trace Viewer**: `npx playwright show-trace`
- **Screenshots**: Automatic on failure
- **Video Recording**: Available for all tests

## Key Dependencies and Common Issues

### System Dependencies

#### macOS Requirements
**Important**: macOS users need to use GNU `grep` and GNU `sed` instead of the built-in BSD versions to avoid compatibility issues with scripts and CI/CD pipelines.

Install using Homebrew:
```bash
brew install grep
brew install gnu-sed
```

**Important**: Make sure to set the GNU versions as default to ensure they are used instead of the built-in macOS versions.

**Note**: The built-in macOS versions of these tools may cause issues when running scripts or tests that expect GNU-compatible behavior.

### External Services

#### Required Services
- **GitHub**: Authentication, repository access
- **Keycloak**: Default authentication provider
- **OpenShift**: Primary deployment platform
- **Advanced Cluster Management**: For OCM plugins

#### Service Configuration
- **GitHub Token**: Required for GitHub integration
- **Keycloak Credentials**: Stored in Vault
- **OpenShift Access**: Cluster credentials
- **ACM Installation**: Required for OCM plugins

### Internal Components

#### Core Components
- **Backstage**: Main application framework
- **Dynamic Plugins**: Plugin management system
- **Catalog**: Entity management
- **Scaffolder**: Template system

#### Key Dependencies
- **Node.js 22**: Runtime environment
- **Yarn 3.8.7**: Package manager
- **Playwright**: Testing framework
- **TypeScript**: Development language

### Common Issues and Solutions

#### Test Failures
1. **Environment Issues**: Verify environment variables
2. **Authentication Problems**: Check credentials and tokens
3. **Timing Issues**: Adjust timeouts in configuration
4. **Resource Constraints**: Check cluster resources

#### CI Failures
1. **Cluster Issues**: Verify cluster availability
2. **Resource Limits**: Check resource quotas
3. **Network Problems**: Verify connectivity
4. **Configuration Errors**: Review job configuration

#### Plugin Issues
1. **Loading Failures**: Check plugin configuration
2. **Dependency Conflicts**: Verify package versions
3. **Configuration Errors**: Review plugin config
4. **Build Issues**: Check build process

## Documentation References

### Core Documentation
- [E2E Testing CI Documentation](docs/e2e-tests/CI.md)
- [Dynamic Plugins Documentation](docs/dynamic-plugins/index.md)
- [Authentication Providers README](e2e-tests/playwright/e2e/authProviders/README.md)
- [OpenShift CI Pipeline README](.ibm/pipelines/README.md)

### Configuration Files
- [Playwright Configuration](e2e-tests/playwright.config.ts)
- [Package Configuration](e2e-tests/package.json)
- [Dynamic Plugins Config](dynamic-plugins/package.json)
- [CI Test Script](.ibm/pipelines/openshift-ci-tests.sh)

### External Resources
- [OpenShift CI Documentation](https://docs.ci.openshift.org/)
- [Playwright Documentation](https://playwright.dev/)
- [Red Hat Developer Hub Documentation](https://redhat-developer.github.io/red-hat-developers-documentation-rhdh/main/)
- [Backstage Documentation](https://backstage.io/docs)
- [Dynamic Plugins Guide](https://github.com/backstage/backstage/tree/master/packages/backend-dynamic-feature-service)

### Key Scripts and Tools
- [Cluster Login Script](.ibm/pipelines/ocp-cluster-claim-login.sh)
- [Test Reporting Script](.ibm/pipelines/reporting.sh)
- [Environment Variables](.ibm/pipelines/env_variables.sh)
- [Dynamic Plugin Installer](docker/install-dynamic-plugins.py)

This context file provides a comprehensive overview of the RHDH repository's testing infrastructure, CI/CD pipeline, and development workflows. Use this as a starting point for understanding the codebase and contributing to the project.
---
